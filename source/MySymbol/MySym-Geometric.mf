beginsymbol(dot_size# + 2side_bearing#, vcentre(2dot_size#)); "centre dot";
  pickup rule_pen;

  fill circle((w/2, (h-d)/2), dot_size);
endchar;

for alpha = 0, 90, 45, 135:
  beginarrow(alpha, (3dot_size# + equal_spread#)/arrow_horiz_len#, dot_size#);
    "colon (" & decimal alpha & ")";
    pickup rule_pen;

    z1 - z0 = (2dot_size + equal_spread) * dir alpha;
    1/2[z0,z1] = centre;

    fill circle(z0, dot_size);
    fill circle(z1, dot_size);
  endchar;
endfor;

for alpha = 0, 90, 45, 135:
  beginarrow(alpha, (5dot_size# + 2equal_spread#)/arrow_horiz_len#, dot_size#);
    "triple colon (" & decimal alpha & ")";
    pickup rule_pen;

    z1 - z0 = (2dot_size + equal_spread) * dir alpha;
    z2 - z1 = (2dot_size + equal_spread) * dir alpha;
    z1      = centre;

    fill circle(z0, dot_size);
    fill circle(z1, dot_size);
    fill circle(z2, dot_size);
  endchar;
endfor;

for alpha = 0, 90, 180, 270:
  beginoperator(plus_size#, 1); "therefore (" & decimal alpha & ")";
    pickup rule_pen;

    r := 1/2(plus_size - dot_size);
    r := r * 1/3[1, sqrt 2];

    z1 = z0 + r * dir alpha;
    z2 = z0 + r * dir (alpha + 120);
    z3 = z0 + r * dir (alpha + 240);

    1/2[z1,1/2[z2,z3]] = centre;

    fill circle(z1, dot_size);
    fill circle(z2, dot_size);
    fill circle(z3, dot_size);
  endchar;
endfor;

for alpha = 0, 45:
  beginoperator(plus_size#, 1); "quad dot (" & decimal alpha & ")";
    pickup rule_pen;

    r := 1/2(plus_size - dot_size);
    r := r/cosd alpha;

    fill circle(centre + r * dir alpha,         dot_size);
    fill circle(centre + r * dir (alpha +  90), dot_size);
    fill circle(centre + r * dir (alpha + 180), dot_size);
    fill circle(centre + r * dir (alpha + 270), dot_size);
  endchar;
endfor;

beginoperator(plus_size#, 1); "five dots";
  pickup rule_pen;

  r := 1/2(plus_size - dot_size);

  fill circle(centre, dot_size);
  fill circle(centre + r * dir   0, dot_size);
  fill circle(centre + r * dir  90, dot_size);
  fill circle(centre + r * dir 180, dot_size);
  fill circle(centre + r * dir 270, dot_size);
endchar;

beginoperator(plus_size#, 1); "minus";

  r := plus_size/2; % - 11/10rule_thickness;
  z1 = centre + r * dir 0;
  z2 = centre + r * dir 180;

  draw_line(1,2);
endchar;

beginoperator(plus_size#, 1); "bar";

  r := plus_size/2; % - 11/10rule_thickness;

  z1 = centre + r * dir 90;
  z2 = centre + r * dir 270;

  draw_line(1,2);
endchar;

beginoperator(plus_size#, 1); "medium slash";

  r := plus_size/2; % - 11/10rule_thickness;
  r := r * 1/3[1, sqrt 2];

  z1 = centre + r * dir 45;
  z2 = centre + r * dir 225;

  draw_line(1,2);
endchar;

beginoperator(plus_size#, 1); "medium backslash";

  r := plus_size/2; % - 11/10rule_thickness;
  r := r * 1/3[1, sqrt 2];

  z1 = centre + r * dir 135;
  z2 = centre + r * dir 315;

  draw_line(1,2);
endchar;

beginoperator(plus_size#, 1); "plus";
  r := plus_size/2; % - 11/10rule_thickness;

  z1 = centre + r * dir  0; z2 = centre + r * dir 180;
  z3 = centre + r * dir 90; z4 = centre + r * dir 270;

  draw_line(1,2);
  draw_line(3,4);
endchar;

beginoperator(plus_size#, 1); "times";

  r := plus_size/2; % - 11/10rule_thickness;
  r := r * 1/3[1, sqrt 2];

  z1 = centre + r * dir  45; z2 = centre + r * dir 225;
  z3 = centre + r * dir 135; z4 = centre + r * dir 315;

  draw_line(1,2);
  draw_line(3,4);
endchar;

beginoperator(plus_size#, 1); "plus minus";
  
  r := plus_size/2; % - 11/10rule_thickness;

  z1 = centre + r * dir  0; z2 = centre + r * dir 180;
  z3 = centre + r * dir 90; z4 = centre + (r - 1/4rule_thickness) * dir 270;

  z5 = centre + r * dir 0 - (r-1/2rule_thickness) * dir 90; z6 = centre + r * dir 180 - (r-1/2rule_thickness) * dir 90;

  draw_line(1,2);
  draw_line(3,4);
  draw_line(5,6);
endchar;

beginoperator(plus_size#, 1); "minus plus";

  r := plus_size/2; % - 11/10rule_thickness;

  z1 = centre + r * dir  0; z2 = centre + r * dir 180;
  z3 = centre + (r - 1/4rule_thickness) * dir 90; z4 = centre + r * dir 270;

  z5 = centre + r * dir 0 + (r-1/2rule_thickness) * dir 90; z6 = centre + r * dir 180 + (r-1/2rule_thickness) * dir 90;

  draw_line(1,2);
  draw_line(3,4);
  draw_line(5,6);
endchar;

for angle = 0, 90, 180, 270:
  beginoperator(plus_size#, 1); "dot minus (" & decimal angle & ")";

    r := plus_size/2; % - 11/10rule_thickness;

    z1 = centre - r * dir angle; z2 = centre + r * dir angle;
    draw_line(1,2);
  
    fill circle(centre + equal_spread * dir (angle + 90), dot_size);
  endchar;
endfor;

for angle = 0, 45, 90, 135:
  beginoperator(plus_size#, 1); "divides";

    r := plus_size/2; % - 11/10rule_thickness;

    z1 = centre - r * dir angle; z2 = centre + r * dir angle;
    draw_line(1,2);
  
    fill circle(centre + equal_spread * dir (angle + 90), dot_size);
    fill circle(centre - equal_spread * dir (angle + 90), dot_size);
  endchar;
endfor;

% Warning: The other two orientations are below.
% They should stay consistent.

beginoperator(plus_size#, 1); "logical not";

  r := plus_size/2; % - 11/10rule_thickness;

  z1 = centre + r * dir 180; z2 = centre + (r+rule_thickness/2) * dir 0;
  draw_line(1,2);

  z3 = z2 - rule_thickness/2* dir 0;
  z4 = centre + r * dir 0 - equal_spread * dir 90;
  draw_line(3,4);
endchar;

beginoperator(plus_size#, 1); "reversed logical not";
  
  r := plus_size/2; % - 11/10rule_thickness;
  
  z1 = centre + r * dir 180 - equal_spread * dir 90;
  z2 = centre + r * dir 180;
  draw_line(1,2);

  z3 = z2 + rule_thickness/2 * dir 180;
  z4 = centre + r * dir 0;
  draw_line(3,4);

endchar;

for alpha = 0, 90, 180, 270:
  beginoperator(plus_size#, 1); "times (" & decimal alpha & ")";
  
    r := plus_size/2; % - 11/10rule_thickness;
    r := r * 1/3[1, sqrt 2];
    
    z1 = centre + r * dir (alpha +  45); z2 = centre + r * dir (alpha + 225);
    z3 = centre + r * dir (alpha + 315); z4 = centre + r * dir (alpha + 135);

    draw_line(1,2); draw_line(3,4);
    
    z2r = z5l; z6l = z3r;
    penpos5(rule_thickness,alpha-90); penpos6(rule_thickness,alpha-90);
    penstroke z5e .. z6e;
    
  endchar;
endfor;

for alpha = 0, 90:
  beginoperator(plus_size#, 1); "bowtie (" & decimal alpha & ")";

    r := plus_size/2; % - 11/10rule_thickness;
    r := r * 1/3[1, sqrt 2];

    z1 = centre + r * dir (alpha +  45); z2 = centre + r * dir (alpha + 225);
    z3 = centre + r * dir (alpha + 135); z4 = centre + r * dir (alpha + 315);

    draw_line(1,2); draw_line(3,4);

    z2l = z5r; z6r = z3l;
    penpos5(rule_thickness,alpha-0); penpos6(rule_thickness,alpha-0);
    penstroke z5e .. z6e;

    z1r = z7l; z8l = z4r;
    penpos7(rule_thickness,alpha-0); penpos8(rule_thickness,alpha-0);
    penstroke z7e .. z8e;

  endchar;
endfor;

for alpha = 0, 90, 180, 270:
  beginoperator(plus_size#, 1); "Y (" & decimal alpha & ")";

    r := plus_size/2; % - 11/10rule_thickness;
    r := r * 1/3[1, sqrt 2];

    z1 = centre; z2 = centre + r * dir alpha; draw_line(1,2);
    z3 = centre; z4 = centre + r * dir (alpha + 120); draw_line(3,4);
    z5 = centre; z6 = centre + r * dir (alpha + 240); draw_line(5,6);
  endchar;
endfor;

% operators

for sign = 1, -1:
  beginoperator(plus_size#, 1); "wedge";

    z2 - z0 = sign * plus_size * dir 0;

    x1 = 1/2[x0, x2] = w/2;

    y1 - y0 = sign * plus_size;
    1/2[y0,y1] = ypart centre;

    draw_arrow_cut(0,1,2);
  endchar;
endfor;

for sign = 1, -1:
  beginoperator(plus_size#, 1); "wedge dot";

    z2 - z0 = sign * plus_size * dir 0;

    x1 = 1/2[x0, x2] = w/2;

    y1 - y0 = sign * plus_size;
    1/2[y0,y1] = ypart centre;

    draw_arrow_cut(0,1,2);
    fill circle(centre - sign * 1/3plus_size * dir 90, dot_size);
  endchar;
endfor;

for sign = 1, -1:
  beginsymbol(13/9plus_size# + 2side_bearing#, vcentre(plus_size#));
    "double wedge";

    z2 - z0 = sign * plus_size * dir 0;

    x1 = 1/2[x0, x2] = w/2;

    y1 - y0 = sign * plus_size;
    1/2[y0,y1] = ypart centre;

    1/2[z0a,z0b] = z0;
    1/2[z1a,z1b] = z1;
    1/2[z2a,z2b] = z2;
    z0b - z0a = z1b - z1a = z2b - z2a = sign * 4/9plus_size * dir 0;

    draw_arrow_cut(0a,1a,2a);
    draw_arrow_cut(0b,1b,2b);

  endchar;
endfor;

for sign = 1, -1:
  beginoperator(plus_size#, 1); "curly wedge";

    draw_prec_cut(1,2,3)(centre + sign * 1/2plus_size * dir 90,
              centre - sign * 1/2plus_size * dir 90,
              plus_size);
  endchar;
endfor;

for sign = 1, -1:
  beginoperator(plus_size#, 1); "curly wedge dot";

    draw_prec_cut(1,2,3)(centre + sign * 1/2plus_size * dir 90,
              centre - sign * 1/2plus_size * dir 90,
              plus_size);
    fill circle(centre - sign * 5/12plus_size * dir 90, dot_size);
  endchar;
endfor;

for sign = 1, -1:
  beginsymbol(13/9plus_size# + 2side_bearing#, vcentre(plus_size#));
    "double wedge";

    pickup rule_pen;

    1/2[z0,z1] = (w/2, (h-d)/2);
    z1 - z0 = 4/9plus_size * dir 0;

    draw_prec_cut(1a,2a,3a)(z0 + sign * 1/2plus_size * dir 90,
              z0 - sign * 1/2plus_size * dir 90,
              plus_size);
    draw_prec_cut(1b,2b,3b)(z1 + sign * 1/2plus_size * dir 90,
              z1 - sign * 1/2plus_size * dir 90,
              plus_size);
  endchar;
endfor;

for sign = 1, -1:
  beginoperator(plus_size#, 1); "union";

    draw_subset(1,2,3,4,5)(centre - sign * 1/2plus_size * dir 90,
                centre + sign * 1/2plus_size * dir 90,
                plus_size - rule_thickness);
  endchar;
endfor;

for sign = 1, -1:
  beginoperator(4/3plus_size#, 1); "double union";

    draw_subset(1,2,3,4,5)(centre - sign * 5/18plus_size * dir 90,
                centre + sign * 2/3plus_size * dir 90,
                5/9plus_size - rule_thickness);
    draw_subset(6,7,8,9,10)(centre - sign * 2/3plus_size * dir 90,
                centre + sign * 2/3plus_size * dir 90,
                4/3plus_size - rule_thickness);
  endchar;
endfor;

for sign = 1, -1:
  beginoperator(plus_size#, 1); "union dot";

    draw_subset(1,2,3,4,5)(centre - sign * 1/2plus_size * dir 90,
                centre + sign * 1/2plus_size * dir 90,
                plus_size - rule_thickness);
    fill circle(centre + sign * 1/6plus_size * dir 90, dot_size);
  endchar;
endfor;

for sign = 1, -1:
  beginoperator(plus_size#, 1); "union plus";

    draw_subset(1,2,3,4,5)(centre - sign * 1/2plus_size * dir 90,
                centre + sign * 1/2plus_size * dir 90,
                plus_size - rule_thickness);

    t := 22/10rule_thickness;
    r := 1/2plus_size - t;

    z6 = centre + sign * 1/6plus_size * dir 90 + r * dir  0;
    z7 = centre + sign * 1/6plus_size * dir 90 + r * dir 180;
    draw_line(6,7);
    z8 = centre + (r + sign * 1/6plus_size) * dir 90;
    z9 = centre + (r - sign * 1/6plus_size) * dir 270;
    draw_line(8,9);
  endchar;
endfor;

for sign = 1, -1:
  beginoperator(plus_size#, 1); "square union";
    
    z3 - z0 = z2 - z1 = (plus_size - rule_thickness) * dir 0;
    z0 - z1 = sign * plus_size * dir 90;

    1/2[1/2[z0,z1], 1/2[z2,z3]] = centre;

    draw_line (0,1); draw_line(2,3);

    z1a = z1 + 1/2*rule_thickness*(sign*up+left);
    z2a = z2 + 1/2*rule_thickness*(sign*up+right);
    
    draw_line(1a,2a);
  endchar;
endfor;

for sign = 1, -1:
  beginoperator(4/3plus_size#, 1); "double square union";

    z3a - z0a = z2a - z1a = (4/3plus_size - rule_thickness) * dir 0;
    z0a - z1a = sign * 4/3plus_size * dir 90;

    1/2[1/2[z0a,z1a], 1/2[z2a,z3a]] = centre;

    z3b - z0b = z2b - z1b = (5/9plus_size -rule_thickness) * dir 0;
    z0b - z1b = sign * 17/18plus_size * dir 90;

    y0b = y0a;
    1/2[x0b, x3b] = xpart centre;

    draw_line(0a, 1a); draw_line(2a,3a);
    z4a = z1a + 1/2*rule_thickness*(sign*up+left);
    z5a = z2a + 1/2*rule_thickness*(sign*up+right);
    
    draw_line(4a,5a);
    
    draw_line(0b, 1b); draw_line(2b,3b);
    z4b = z1b + 1/2*rule_thickness*(sign*up+left);
    z5b = z2b + 1/2*rule_thickness*(sign*up+right);
    draw_line(4b,5b);

  endchar;
endfor;

for sign = 1, -1:
  beginoperator(plus_size#, 1); "square union dot";

    z3 - z0 = z2 - z1 = (plus_size - rule_thickness) * dir 0;
    z0 - z1 = sign * plus_size * dir 90;

    1/2[1/2[z0,z1], 1/2[z2,z3]] = centre;

    draw_line (0,1); draw_line(2,3);

    z1a = z1 + 1/2*rule_thickness*(sign*up+left);
    z2a = z2 + 1/2*rule_thickness*(sign*up+right);
    
    draw_line(1a,2a);

    fill circle(centre + sign * 1/6plus_size * dir 90, dot_size);
  endchar;
endfor;

for sign = 1, -1:
  beginoperator(plus_size#, 1); "square union plus";

    z3 - z0 = z2 - z1 = (plus_size - rule_thickness) * dir 0;
    z0 - z1 = sign * plus_size * dir 90;

    1/2[1/2[z0,z1], 1/2[z2,z3]] = centre;

    draw_line (0,1); draw_line(2,3);

    z1a = z1 + 1/2*rule_thickness*(sign*up+left);
    z2a = z2 + 1/2*rule_thickness*(sign*up+right);
    
    draw_line(1a,2a);

    t := 22/10rule_thickness;
    r := 1/2plus_size - t;

    z6 = centre + sign * 1/6plus_size * dir 90 + r * dir  0;
    z7 = centre + sign * 1/6plus_size * dir 90 + r * dir 180;
    z8 = centre + (r + sign * 1/6plus_size) * dir 90;
    z9 = centre + (r - sign * 1/6plus_size) * dir 270;

    draw_line(6,7); draw_line(8,9);
  endchar;
endfor;


% triangles

for alpha = 0, 90, 180, 270:
  beginoperator(small_op_size#, 1); "small triangle (" & decimal alpha & ")";
    draw_triangle(1)(centre, w/2-side_bearing, alpha);
  endchar;
endfor;

for alpha = 0, 90, 180, 270:
  beginoperator(small_op_size#, 1); "small filled triangle (" & decimal alpha & ")";
    fill_triangle(1)(centre, w/2-side_bearing, alpha);
  endchar;
endfor;

for alpha = 0, 90, 180, 270:
  beginoperator(med_op_size#, 1); "medium triangle (" & decimal alpha & ")";
    draw_triangle(1)(centre, w/2-side_bearing, alpha);
  endchar;
endfor;

for alpha = 0, 90, 180, 270:
  beginoperator(large_op_size#, 1); "large triangle (" & decimal alpha & ")";
    draw_triangle(1)(centre, w/2-side_bearing, alpha);
  endchar;
endfor;

% circles

beginoperator(4/5small_op_size#, 1); "small circle";
  draw_circle(1)(centre, 4/10small_op_size);
endchar;

beginoperator(4/5small_op_size#, 1); "small filled circle";
  draw_circle(1)(centre, 4/10small_op_size);
  fill circle(centre, 4/10small_op_size);
endchar;

beginoperator(4/5med_op_size#, 1); "medium circle";
  draw_circle(1)(centre, 1/2(h+d));
endchar;

beginoperator(4/5large_op_size#, 1); "large circle";
  draw_circle(1)(centre, 4/10large_op_size);
endchar;

beginoperator(4/5med_op_size#, 1); "medium circle minus";
  draw_circle(1)(centre, 1/2(h+d));

  z5 = centre + plus_size/2 * left; z6 = centre + plus_size/2 * right;
  draw_line(5,6);
endchar;

beginoperator(4/5med_op_size#, 1); "medium circle bar";
  draw_circle(1)(centre, 1/2(h+d));

  z5 = centre + plus_size/2 * up; z6 = centre + plus_size/2 * down;
  draw_line(5,6);
endchar;

beginoperator(4/5med_op_size#, 1); "medium circle slash";
  draw_circle(1)(centre, 1/2(h+d));
  
  z5 = centre + plus_size/2 * dir  45; z6 = centre + plus_size/2 * dir 225;
  draw_line(5,6);
endchar;

beginoperator(4/5med_op_size#, 1); "medium circle backslash";
  draw_circle(1)(centre, 1/2(h+d));
  
  z5 = centre + plus_size/2 * dir 135; z6 = centre + plus_size/2 * dir 315;
  draw_line(5,6);
endchar;

beginoperator(4/5med_op_size#, 1); "medium circle plus";
  draw_circle(1)(centre, 1/2(h+d));
  
  z5 = centre + plus_size/2 * left; z6 = centre + plus_size/2 * right;
  z7 = centre + plus_size/2 * up; z8 = centre + plus_size/2 * down;
  draw_line(5,6);
  draw_line(7,8);
endchar;

beginoperator(4/5med_op_size#, 1); "medium circle times";
  draw_circle(1)(centre, 1/2(h+d));
  
  z5 = centre + plus_size/2 * dir  45; z6 = centre + plus_size/2 * dir 225;
  z7 = centre + plus_size/2 * dir 135; z8 = centre + plus_size/2 * dir 315;
  draw_line(5,6);
  draw_line(7,8);
endchar;

beginoperator(4/5med_op_size#, 1); "medium circle dot";
  draw_circle(1)(centre, 1/2(h+d));
  fill circle(centre, 1.3dot_size);
endchar;

beginoperator(4/5med_op_size#, 1); "medium circle circle";
  draw_circle(1)(centre, 1/2(h+d));
  draw_circle(5)(centre, (plus_size + 11/5rule_thickness)/5);
endchar;

beginoperator(4/5med_op_size#, 1); "medium circle triangle";
  draw_circle(1)(centre, 1/2(h+d));
  draw_triangle(5)(centre, small_op_size/2, 90);
endchar;

beginoperator(4/5med_op_size#, 1); "medium circle asterisk";
  draw_circle(1)(centre, 1/2(h+d));

  penpos a0(4/3rule_thickness,   0 - 7);
  penpos a1(4/3rule_thickness,  72 - 7);
  penpos a2(4/3rule_thickness, 144 - 7);
  penpos a3(4/3rule_thickness, 216 - 7);
  penpos a4(4/3rule_thickness, 288 - 7);

  penpos b0(2/3rule_thickness,   0 - 7);
  penpos b1(2/3rule_thickness,  72 - 7);
  penpos b2(2/3rule_thickness, 144 - 7);
  penpos b3(2/3rule_thickness, 216 - 7);
  penpos b4(2/3rule_thickness, 288 - 7);

  reg_poly_points(a)(5, centre, plus_size/2, 77);

  z.b0 = z.b1 = z.b2 = z.b3 = z.b4 = centre;

  fill stroke z.a0e -- z.b0e;
  fill stroke z.a1e -- z.b1e;
  fill stroke z.a2e -- z.b2e;
  fill stroke z.a3e -- z.b3e;
  fill stroke z.a4e -- z.b4e;
endchar;

beginoperator(4/5med_op_size#, 1); "medium circle star";
  pickup rule_pen;

  draw_circle(1)(centre, 1/2(h+d));

  z5 = centre + plus_size/2 * dir (90);
  z6 = centre + plus_size/20 * dir (126);
  
  reg_poly_points_p(a)(5, centre, plus_size/2, 90, 1/sind(angle(z1[1]-z1[2])-angle(z1[1]-centre)));
  reg_poly_points_p(b)(5, centre, plus_size/20, 126, 1/1/sind(angle(z1[2]-centre)-angle(z1[2]-z1[1])));

  penstroke z.a0e -- z.b0e -- z.a1e -- z.b1e -- z.a2e -- z.b2e -- z.a3e -- z.b3e -- z.a4e -- z.b4e -- cycle;
  fill z.a0 -- z.b0 -- z.a1 -- z.b1 -- z.a2 -- z.b2 -- z.a3 -- z.b3 -- z.a4 -- z.b4 -- cycle;
endchar;

beginoperator(4/5med_op_size#, 1); "negated medium circle";

  r := 3/4(plus_size + 11/5rule_thickness);

  draw_circle(1)(centre, 1/2(h+d));
  z5 = centre + r * dir 45; z6 = centre + r * dir 225;
  draw_line(5,6);
endchar;

% squares

beginoperator(small_op_size#/sqrt(2), 1); "small square";
  draw_square(1,2,3,4)(centre, w/2 - side_bearing, 0);
endchar;

beginoperator(small_op_size#/sqrt(2), 1); "small filled square";
  draw_square(1,2,3,4)(centre, w/2 - side_bearing, 0);
  fill square(centre, w/2 - side_bearing, 0);
endchar;

beginoperator(med_op_size#/sqrt(2), 1); "medium square";
  draw_square(1,2,3,4)(centre, w/2 - side_bearing, 0);
endchar;

beginoperator(large_op_size#/sqrt(2), 1); "large square";
  draw_square(1,2,3,4)(centre, w/2 - side_bearing, 0);
endchar;

beginoperator(small_op_size#, 1); "small diamond";
  draw_square(1,2,3,4)(centre, (w/2 - side_bearing) / sqrt(2), 45);
endchar;

beginoperator(small_op_size#, 1); "small filled diamond";
  draw_square(1,2,3,4)(centre, (w/2 - side_bearing) / sqrt(2), 45);
  fill square(centre, (w/2 - side_bearing) / sqrt(2), 45);
endchar;

beginoperator(med_op_size#, 1); "medium diamond";
  draw_square(1,2,3,4)(centre, (w/2 - side_bearing) / sqrt(2), 45);
endchar;

beginoperator(large_op_size#, 1); "large diamond";
  draw_square(1,2,3,4)(centre, (w/2 - side_bearing) / sqrt(2), 45);
endchar;

beginoperator(med_op_size#/sqrt(2), 1); "medium square minus";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r, 0);
  z5 = centre + sqrt .5 * r * dir  0;
  z6 = centre + sqrt .5 * r * dir 180;
  draw_line(5,6);
endchar;

beginoperator(med_op_size#/sqrt(2), 1); "medium square vert";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r, 0);
  z5 = centre + sqrt .5 * r * dir 90;
  z6 = centre + sqrt .5 * r * dir 270;
  draw_line(5,6);
endchar;

beginoperator(med_op_size#/sqrt(2), 1); "medium square slash";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r, 0);
  z5 = centre + r * dir 45; z6 = centre + r * dir 225;
  draw_line(5,6);
endchar;

beginoperator(med_op_size#/sqrt(2), 1); "medium square backslash";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r, 0);
  z5 = centre + r * dir 135; z6 = centre + r * dir 315;
  draw_line(5,6);
endchar;

beginoperator(med_op_size#/sqrt(2), 1); "medium square plus";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r, 0);
  z5 = centre + sqrt .5 * r * dir  0; z6 = centre + sqrt .5 * r * dir 180;
  draw_line(5,6);
  z7 = centre + sqrt .5 * r * dir 90; z8 = centre + sqrt .5 * r * dir 270;
  draw_line(7,8);
endchar;

beginoperator(med_op_size#/sqrt(2), 1); "medium square times";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r, 0);
  z5 = centre + r * dir  45; z6 = centre + r * dir 225;
  draw_line(5,6);
  z7 = centre + r * dir 135; z8 = centre + r * dir 315;
  draw_line(7,8);
endchar;

beginoperator(med_op_size#/sqrt(2), 1); "medium square dot";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r, 0);
  fill circle(centre, 1.3dot_size);
endchar;

beginoperator(med_op_size#/sqrt(2), 1); "medium square square";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r, 0);
  draw_square(5,6,7,8)(centre, .4r, 0);
endchar;

beginoperator(med_op_size#, 1); "medium diamond minus";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r / sqrt(2), 45);
  draw_line(2l,4l);
endchar;

beginoperator(med_op_size#, 1); "medium diamond vert";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r / sqrt(2), 45);
  draw_line(1l,3l);
endchar;

beginoperator(med_op_size#, 1); "medium diamond slash";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r / sqrt(2), 45);
  z5 =  centre + sqrt .5 * r * dir 45;  z6 = centre + sqrt .5 * r * dir 225;
  draw_line(5,6);
endchar;

beginoperator(med_op_size#, 1); "medium diamond backslash";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r / sqrt(2), 45);
  z5 = centre + sqrt .5 * r * dir 135; z6 = centre + sqrt .5 * r * dir 315;
  draw_line(5,6);
endchar;

beginoperator(med_op_size#, 1); "medium diamond plus";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r / sqrt(2), 45);
  draw_line(1l,3l);
  draw_line(2l,4l);
endchar;

beginoperator(med_op_size#, 1); "medium diamond times";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r / sqrt(2), 45);
  z5 = centre + sqrt .5 * r * dir  45; z6 = centre + sqrt .5 * r * dir 225;
  draw_line(5,6);
  z7 = centre + sqrt .5 * r * dir 135; z8 = centre + sqrt .5 * r * dir 315;
  draw_line(7,8);
endchar;

beginoperator(med_op_size#, 1); "medium diamond dot";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r / sqrt(2), 45);
  fill circle(centre, 1.3dot_size);
endchar;

beginoperator(med_op_size#, 1); "medium diamond diamond";
  r := w/2 - side_bearing;
  draw_square(1,2,3,4)(centre, r / sqrt(2), 45);
  draw_square(5,6,7,8)(centre, .4r, 45);
endchar;

beginoperator(small_op_size#, 1); "small star";
  pickup rule_pen;
  r := w/2 - side_bearing;

  z1 = centre + r * dir (90);
  z2 = centre + .4r * dir (126);

  % scale that thickness of line is rule_thickness
  
  reg_poly_points_p(a)(5, centre, r, 90,1/sind(angle(z1-z2)-angle(z1-centre)));
  reg_poly_points_p(b)(5, centre, .4r, 126,1/sind(angle(z2-centre)-angle(z2-z1)));
  penstroke z.a0e{z.b0-z.a0} .. {z.b0-z.a0}z.b0e{z.a1-z.b0} .. {z.a1-z.b0}z.a1e{z.b1-z.a1e} .. {z.b1-z.a1e}z.b1e{z.a2-z.b1} .. {z.a2-z.b1}z.a2e{z.b2-z.a2} .. {z.b2-z.a2}z.b2e{z.a3-z.b2} .. {z.a3-z.b2}z.a3e{z.b3-z.a3} .. {z.b3-z.a3}z.b3e{z.a4-z.b3} .. {z.a4-z.b3}z.a4e{z.b4-z.a4} .. {z.b4-z.a4}z.b4e{z.a0-z.b4} .. {z.a0-z.b4}cycle;
endchar;

beginoperator(small_op_size#, 1); "small filled star";
  r := w/2 - side_bearing;

  z1 = centre + r * dir (90);
  z2 = centre + .4r * dir (126);
  
  reg_poly_points_p(a)(5, centre, r, 90,1/sind(angle(z1-z2)-angle(z1-centre)));
  reg_poly_points_p(b)(5, centre, .4r, 126,1/sind(angle(z2-centre)-angle(z2-z1)));
  penstroke z.a0e{z.b0-z.a0} .. {z.b0-z.a0}z.b0e{z.a1-z.b0} .. {z.a1-z.b0}z.a1e{z.b1-z.a1e} .. {z.b1-z.a1e}z.b1e{z.a2-z.b1} .. {z.a2-z.b1}z.a2e{z.b2-z.a2} .. {z.b2-z.a2}z.b2e{z.a3-z.b2} .. {z.a3-z.b2}z.a3e{z.b3-z.a3} .. {z.b3-z.a3}z.b3e{z.a4-z.b3} .. {z.a4-z.b3}z.a4e{z.b4-z.a4} .. {z.b4-z.a4}z.b4e{z.a0-z.b4} .. {z.a0-z.b4}cycle;
  fill z.a0 -- z.b0 -- z.a1 -- z.b1 -- z.a2 -- z.b2 -- z.a3 -- z.b3 -- z.a4 -- z.b4 -- cycle;
endchar;

beginoperator(med_op_size#, 1); "medium star";
  r := w/2 - side_bearing;

  z1 = centre + r * dir (90);
  z2 = centre + .4r * dir (126);

  reg_poly_points_p(a)(5, centre, r, 90,1/sind(angle(z1-z2)-angle(z1-centre)));
  reg_poly_points_p(b)(5, centre, .4r, 126,1/sind(angle(z2-centre)-angle(z2-z1)));
  penstroke z.a0e{z.b0-z.a0} .. {z.b0-z.a0}z.b0e{z.a1-z.b0} .. {z.a1-z.b0}z.a1e{z.b1-z.a1e} .. {z.b1-z.a1e}z.b1e{z.a2-z.b1} .. {z.a2-z.b1}z.a2e{z.b2-z.a2} .. {z.b2-z.a2}z.b2e{z.a3-z.b2} .. {z.a3-z.b2}z.a3e{z.b3-z.a3} .. {z.b3-z.a3}z.b3e{z.a4-z.b3} .. {z.a4-z.b3}z.a4e{z.b4-z.a4} .. {z.b4-z.a4}z.b4e{z.a0-z.b4} .. {z.a0-z.b4}cycle;
endchar;


beginoperator(large_op_size#, 1); "large star";
  r := w/2 - side_bearing;

  z1 = centre + r * dir (90);
  z2 = centre + .4r * dir (126);

  reg_poly_points_p(a)(5, centre, r, 90,1/sind(angle(z1-z2)-angle(z1-centre)));
  reg_poly_points_p(b)(5, centre, .4r, 126,1/sind(angle(z2-centre)-angle(z2-z1)));
  penstroke z.a0e{z.b0-z.a0} .. {z.b0-z.a0}z.b0e{z.a1-z.b0} .. {z.a1-z.b0}z.a1e{z.b1-z.a1e} .. {z.b1-z.a1e}z.b1e{z.a2-z.b1} .. {z.a2-z.b1}z.a2e{z.b2-z.a2} .. {z.b2-z.a2}z.b2e{z.a3-z.b2} .. {z.a3-z.b2}z.a3e{z.b3-z.a3} .. {z.b3-z.a3}z.b3e{z.a4-z.b3} .. {z.a4-z.b3}z.a4e{z.b4-z.a4} .. {z.b4-z.a4}z.b4e{z.a0-z.b4} .. {z.a0-z.b4}cycle;
endchar;

beginoperator(med_op_size#, 1); "medium pentagram";
  r := w/2 - side_bearing;
  reg_poly_points_p(a)(5, centre, r, 90,1/sind(18));
  penstroke z.a0e -- z.a2e -- z.a4e -- z.a1e -- z.a3e -- cycle;
endchar;


beginoperator(large_op_size#, 1); "large pentagram";
  r := w/2 - side_bearing;
  reg_poly_points_p(a)(5, centre, r, 90, 1/sind(18));
  penstroke z.a0e -- z.a2e -- z.a4e -- z.a1e -- z.a3e -- cycle;
endchar;

beginoperator(small_op_size#, 1); "medium thin filled star";
  pickup pencircle scaled 1/2rule_thickness;

  r := w/2 - side_bearing;

  z1 = centre + r * dir (90);
  z2 = centre + .2r * dir (126);
  
  reg_poly_points_p(a)(5, centre, r, 90,1/2*1/sind(angle(z1-z2)-angle(z1-centre)));
  reg_poly_points_p(b)(5, centre, .2r, 126,1/2*1/sind(angle(z2-centre)-angle(z2-z1)));

  penstroke z.a0e -- z.b0e -- z.a1e -- z.b1e -- z.a2e -- z.b2e -- z.a3e -- z.b3e -- z.a4e -- z.b4e -- cycle;
  fill z.a0 -- z.b0 -- z.a1 -- z.b1 -- z.a2 -- z.b2 -- z.a3 -- z.b3 -- z.a4 -- z.b4 -- cycle;
endchar;

beginoperator(small_op_size#, 1); "asterisk";
  r := w/2 - side_bearing;

  penpos a0(4/3rule_thickness,   0 - 7);
  penpos a1(4/3rule_thickness,  72 - 7);
  penpos a2(4/3rule_thickness, 144 - 7);
  penpos a3(4/3rule_thickness, 216 - 7);
  penpos a4(4/3rule_thickness, 288 - 7);

  penpos b0(2/3rule_thickness,   0 - 7);
  penpos b1(2/3rule_thickness,  72 - 7);
  penpos b2(2/3rule_thickness, 144 - 7);
  penpos b3(2/3rule_thickness, 216 - 7);
  penpos b4(2/3rule_thickness, 288 - 7);

  reg_poly_points(a)(5, centre, r, 77);

  z.b0 = z.b1 = z.b2 = z.b3 = z.b4 = centre;

  fill stroke z.a0e -- z.b0e;
  fill stroke z.a1e -- z.b1e;
  fill stroke z.a2e -- z.b2e;
  fill stroke z.a3e -- z.b3e;
  fill stroke z.a4e -- z.b4e;
endchar;

for alpha = 0, 45, 90, 135:
  beginsymbol(2order_width# * abs (cosd (alpha)) + 5/3equal_spread# * abs (sind (alpha)) + 2side_bearing#,
      vcentre(2order_width# * abs (sind (alpha)) + 5/3equal_spread# * abs (cosd (alpha)) + rule_thickness#));
    "infinity";

    pair centre;
    centre := (w/2, (h-d)/2);

    z0 = centre - (order_width - 1/2rule_thickness) * dir alpha;
    z1 = centre + (order_width - 1/2rule_thickness) * dir alpha;

    z6 = 1/5[z0,z1];
    z7 = 4/5[z0,z1];

    z2 = z6 + 5/6equal_spread * dir (alpha + 90);
    z3 = z6 - 5/6equal_spread * dir (alpha + 90);
    z4 = z7 + 5/6equal_spread * dir (alpha + 90);
    z5 = z7 - 5/6equal_spread * dir (alpha + 90);

  z8 = 1/2[z0,z1];
  z9 = z8;
  
  penpos4(rule_thickness,angle(z4-z5));
  penpos3(rule_thickness,angle(z2-z3));
  penpos0(rule_thickness,angle(z1-z0));
  penpos2(rule_thickness,angle(z3-z2));
  penpos5(rule_thickness,angle(z5-z4));
  penpos1(rule_thickness,angle(z1-z0));
  penpos8(rule_thickness,angle(z3-z4)-90);
  penpos9(rule_thickness,angle(z2-z5)+90);
  
    penstroke z4e{dir (alpha + 180)}
      .. {dir (alpha + 225)}z8e{dir (alpha + 225)}
      .. {dir (alpha + 180)}z3e{dir (alpha + 180)}
      .. {dir (alpha + 90)}z0e{dir (alpha + 90)}
      .. {dir (alpha + 0)}z2e{dir (alpha + 0)}
      .. {dir (alpha + -45)}z9e{dir (alpha + -45)}
      .. {dir (alpha + 0)}z5e{dir (alpha + 0)}
      .. {dir (alpha + 90)}z1e{dir (alpha + 90)}
      .. cycle;
    penlabels (0,1,2,3,4,5,6,7,8);
  endchar;
endfor

for alpha = 0, 90, 180, 270:
  beginsymbol(17/10order_width# * abs (cosd (alpha)) + 5/3equal_spread# * abs (sind (alpha)) + 2side_bearing#,
      vcentre(17/10order_width# * abs (sind (alpha)) + 5/3equal_spread# * abs (cosd (alpha)) + rule_thickness#));
    "proportional";

    pair centre;
    centre := (w/2, (h-d)/2);

    z0 = centre - (17/20order_width - 1/2rule_thickness) * dir alpha;
    z1 = centre + (15/20order_width - 1/2rule_thickness) * dir alpha;

    z4 = z1 + 5/6equal_spread * dir (alpha + 90);
    z5 = z1 - 5/6equal_spread * dir (alpha + 90);

    z6 - z4 = z7 - z5 = 1/10order_width * dir alpha;

    z8 = 1/4[z0,z1];

    z2 = z8 + 5/6equal_spread * dir (alpha + 90);
    z3 = z8 - 5/6equal_spread * dir (alpha + 90);

  z10 = 5/8[z0,z1];
  z11 = z10;
  
  penpos4(rule_thickness,angle(z4-z5));
  penpos6(rule_thickness,angle(z6-z7));
  penpos3(rule_thickness,angle(z2-z3));
  penpos0(rule_thickness,angle(z1-z0));
  penpos2(rule_thickness,angle(z3-z2));
  penpos5(rule_thickness,angle(z5-z4));
  penpos7(rule_thickness,angle(z7-z6));
  penpos10(rule_thickness,angle(z3-z4)-90);
  penpos11(rule_thickness,angle(z2-z5)+90);

  
    penstroke z6e .. z4e{dir (alpha + 180)}
            .. {dir (alpha + 225)}z10e{dir (alpha + 225)}
            .. {dir (alpha + 180)}z3e{dir (alpha + 180)}
            .. {dir (alpha + 90)}z0e{dir (alpha + 90)}
            .. {dir (alpha + 0)}z2e{dir (alpha + 0)}
            .. {dir (alpha + -45)}z11e{dir (alpha + -45)}
            .. {dir (alpha + 0)}z5e .. z7e;
    penlabels (0,1,2,3,4,5,6,7,10);
  endchar;
endfor;

for alpha = 0, 45, 90, 135:
  beginsymbol(14/10order_width# * abs (cosd (alpha)) + 5/3equal_spread# * abs (sind (alpha)) + 2side_bearing#,
      vcentre(14/10order_width# * abs (sind (alpha)) + 5/3equal_spread# * abs (cosd (alpha)) + rule_thickness#));
    "crossing";
    pickup rule_pen;

    pair centre;
    centre := (w/2, (h-d)/2);

    z0 = centre - (14/20order_width - 1/2rule_thickness) * dir alpha;
    z1 = centre + (14/20order_width - 1/2rule_thickness) * dir alpha;

    z2 = z0 + 5/6equal_spread * dir (alpha + 90);
    z3 = z0 - 5/6equal_spread * dir (alpha + 90);
    z4 = z1 + 5/6equal_spread * dir (alpha + 90);
    z5 = z1 - 5/6equal_spread * dir (alpha + 90);

    z6 - z4 = z7 - z5 = 1/10order_width * dir alpha;
    z2 - z8 = z3 - z9 = 1/10order_width * dir alpha;

  z10 = 1/2[z0,z1];
  z11 = z10;
  
  penpos4(rule_thickness,angle(z4-z5));
  penpos6(rule_thickness,angle(z6-z7));
  penpos3(rule_thickness,angle(z2-z3));
  penpos9(rule_thickness,angle(z8-z9));
  penpos2(rule_thickness,angle(z3-z2));
  penpos8(rule_thickness,angle(z9-z8));
  penpos5(rule_thickness,angle(z5-z4));
  penpos7(rule_thickness,angle(z7-z6));
  penpos10(rule_thickness,angle(z3-z4)-90);
  penpos11(rule_thickness,angle(z2-z5)+90);

  
  penstroke z6e .. z4e{dir (alpha + 180)}
            .. {dir (alpha + 225)}z10e{dir (alpha + 225)}
            .. {dir (alpha + 180)}z3e .. z9e;
  penstroke z8e .. z2e{dir (alpha + 0)}
            .. {dir (alpha + -45)}z11e{dir (alpha + -45)}
            .. {dir (alpha + 0)}z5e .. z7e;
  penlabels (0,1,2,3,4,5,6,7,8,9,10);
  endchar;
endfor;

beginoperator(med_op_size#, 1); "between";
  r := w/2 - side_bearing;

  draw_smile(1)( 1, centre - r * dir 90, centre + r * dir 90, equal_spread, true);
  draw_smile(2)(-1, centre - r * dir 90, centre + r * dir 90, equal_spread, true);
endchar;

beginoperator(med_op_size#, 1); "reversed between";
  r := w/2 - side_bearing;

  draw_smile(1)( 1,  centre - 2/3equal_spread * dir 0 - r * dir 90,
                  centre - 2/3equal_spread * dir 0 + r * dir 90,
                  2/3equal_spread, true);
  draw_smile(2)(-1, centre + 2/3equal_spread * dir 0 - r * dir 90,
                 centre + 2/3equal_spread * dir 0 + r * dir 90,
                 2/3equal_spread, true);
endchar;

for sign = 1, -1:
  beginsymbol(order_width# + 2side_bearing#, 2math_axis# + rule_thickness#, rule_thickness#); "top";

    z1 - z0 = z3 - z2 = order_width * dir 0;
    z2 - z0 = sign * 2math_axis * dir 90;

    1/2[1/2[z0,z1], 1/2[z2,z3]] = (w/2, (h-d)/2);

    draw_line(0,1);
    z4 =  1/2[z0,z1];
    z5 =  1/2[z2,z3];
    draw_line(4,5);
  endchar;
endfor;

beginsymbol(2/3equal_spread# + 2side_bearing#, vcentre(plus_size#+rule_thickness#)); "wreath";
  z0 = (w/2, (h-d)/2);

  draw_sim(1)(z0 + 1/2plus_size * dir 90, z0 - 1/2plus_size * dir 90);
endchar;

beginoperator(med_op_size#, 1); "angle";
  z0 = centre - 1/3plus_size * dir 90;

  z1 = z0 + 1/2plus_size * dir 0;
  z2 = z0 - 1/2plus_size * dir 0;
  x3 = xpart centre + 1/2plus_size;
  y3 = ypart centre + 2/3plus_size;

  z4 = 5/6[z2,z3];
  z5 = z2;
  penpos5(rule_thickness,angle(z3-z2)+90);
  penpos4(rule_thickness,angle(z3-z2)+90);
  z6r = z2r;
  z6  = z5  + (z2r-z5r);
  z6l = z5l + (z2r-z5r);

  draw_line(1,2);
  penstroke z6e .. z4e;

  penlabels(1,2,3,4,6);
endchar;

beginoperator(med_op_size#, 1); "measured angle";
  pickup rule_pen;

  z0 = centre - 1/3plus_size * dir 90;

  z1 = z0 + 1/2plus_size * dir 0;
  z2 = z0 - 1/2plus_size * dir 0;
  x3 = xpart centre + 1/2plus_size;
  y3 = ypart centre + 2/3plus_size;

  z4 = 5/6[z2,z3];
  z5 = z2;
  penpos5(rule_thickness,angle(z3-z2)+90);
  penpos4(rule_thickness,angle(z3-z2)+90);
  z6r = z2r;
  z6  = z5  + (z2r-z5r);
  z6l = z5l + (z2r-z5r);

  draw_line(1,2);
  penstroke z6e .. z4e;

  penpos7(rule_thickness,angle(z2-z1));
  penpos8(rule_thickness,angle(z2-z4));
  z7 = 2/3 [z2,z1];
  z8 = z2 + (2/3[z2,z1] - z2) rotated angle (z3 - z2);

  penstroke z7e{dir 90} .. {dir (angle (z3 - z2) + 90)}z8e;
  penlabels(3,4,7,8);
endchar;

beginoperator(med_op_size#, 1); "spherical angle";

  z0 = centre - 1/2plus_size * dir 0;

  z1 = z0 + plus_size * dir 25;
  z2 = z0 + plus_size * dir -25;
  z3 = z0 + 2/3plus_size * dir 25;
  z4 = z0 + 2/3plus_size * dir -25;
%  draw_arrow_point(2,0,1,5);
  draw_arrow(2,0,1);

  penpos3(rule_thickness,angle(z1-z0));
  penpos4(rule_thickness,angle(z2-z0));
  penstroke z4e{dir 65} .. {dir 115}z3e;
  penlabels(3,4);
endchar;

beginsymbol(5.5u#, 4/5asc_height#, 0); "prime";
  pickup penrazor;

  z0 = (w, h);

  z1 = z0 + 7/3u * dir 183;

  z2 = (1u, 1/9h);
  z3 = z2 + u * dir -20;

  fill z0 -- z1 -- z2 -- z3 -- cycle;
endchar;

beginsymbol(5.5u#, 4/5asc_height#, 0); "backprime";
  pickup penrazor;

  z0 = (0, h);

  z1 = z0 + 7/3u * dir -3;

  z2 = (w - 1u, 1/9h);
  z3 = z2 + u * dir 200;

  fill z0 -- z1 -- z2 -- z3 -- cycle;
endchar;

for sign = 1, -1:
  beginoperator(plus_size#, 1); "product";
    draw_product(centre, plus_size, plus_size, sign, rule_thickness);
  endchar;
endfor;

beginsymbol(13u# + 2side_bearing#, asc_height#, 0); "check mark";
  lft x1 = hround(1.5u);
  x2 = hround(w/3);
  x3 = w - x1;
  x4 = w - 3/2x2;

  y1 = math_axis;
  y2 = -d;
  y3 = y4 = h;

  penpos1(3/2rule_thickness,30);
  penpos2(3/2rule_thickness,30);
  penpos3(3/4rule_thickness,-30);
  %draw z1 -- z2{z4 - z2} .. z3;
  penstroke z1e{z2-z1} .. z2e;
  penstroke z2e{z4 - z2} .. z3e;

  penlabels(1,2,3,4);
endchar; 

beginsymbol(6u# + 2side_bearing#, 5/4asc_height#, 1/8asc_height#); "lightning";

  penpos1 (2rule_thickness, -20);
  penpos4 (5/6rule_thickness, -20);

  x3r = w - side_bearing;
  x2l = side_bearing;
  x4  = 1/4w;

  y1l = h;
  y3r = 14/24h;
  y4  = -d + 1/2rule_thickness;

  z2'l = z2l;
  z3'r = z3r;

  z3'l = z2l + whatever * dir 15;
  z2'r = z3r + whatever * dir 15;

  z2r - z2l = 3/2rule_thickness * dir 15;
  z3r - z3l = 2rule_thickness * dir 15;
  z3'l = z3r + rule_thickness * dir (angle (z4r - z3r));

  z1l - z2l = whatever * (z4r - z3r);
  z2'r = whatever[z1l,z2l];

  fill stroke z1e -- z2e -- z2'e -- z3'e -- z3e -- z4e;

  pickup rule_pen;

  draw_arrowhead(5,6)(z4, angle (z4l - z3l), arrow_spread);

  penlabels(1,2,2',3',3,4);
endchar;

beginsymbol(11u#, 1/2[x_height#,asc_height#], 0)
  "diamond suit";

  x0 = x2 = w/2;
  1/2[y0,y2] = h/2;
  y2 - y0 = h;

  1/2[x1,x3] = w/2;
  x3 - x1 = w - 2side_bearing;
  y1 = y3 = h/2;

  penpos1(rule_thickness/sind(angle(z2-z1)),0);
  penpos2(rule_thickness/sind(90-angle(z2-z1)),-90);
  penpos3(rule_thickness/sind(angle(z2-z1)),-180);
  penpos0(rule_thickness/sind(90-angle(z2-z1)),90);


  penstroke z0e{dir (90+30)} .. {dir (180-30)}z1e{dir (0+30)}
                       .. {dir (90-30)}z2e{dir (270+30)}
                       .. {dir (0-30)}z3e{dir (180+30)}
                       .. {dir (270-30)}z0e .. cycle;
  penlabels(0,1,2,3);

endchar;

beginsymbol(11u#, 1/2[x_height#,asc_height#], 0)
  "heart suit";

  x0 = x1 = w/2;
  y0 = 0;

  1/2[x2,x3] = w/2;
  x3 - x2 = w - 2side_bearing;

  y1 = y2 = y3;

  x4 = 1/2[x1,x2];
  x5 = 1/2[x1,x3];

  y4l = y5r = h;

  h - y1 - 1/2rule_thickness = x4 - x2;

  z6 = 1/2[z2,z0]+1/2rule_thickness*left;
  z7 = 1/2[z3,z0]+1/2rule_thickness*right;

  penpos1(rule_thickness/cosd(20),-180);
  penpos2(rule_thickness/abs(sind(angle(z6-z2))),0);
  penpos3(rule_thickness/abs(sind(angle(z6-z2))),0);
  penpos4(rule_thickness,-90);
  penpos5(rule_thickness,90);
  penpos6(rule_thickness/abs(sind(angle(z0-z6))),0);
  penpos7(rule_thickness/abs(sind(angle(z0-z6))),0);
  penpos0(rule_thickness/cosd(20),0);
  

penstroke z0e{dir (90+20)} .. z6e .. z2e .. z4e .. {dir (270+20)}z1e;
penstroke z1e{dir (90-20)} .. z5e .. z3e .. z7e .. {dir (270-20)}z0e;

  penlabels(0,1,2,3,4,5,6,7);
endchar;

beginsymbol(11u#, 1/2[x_height#,asc_height#], 0)
  "spade suit";

  x0 = x1 = w/2;
  y0 = h + 1/2rule_thickness;

  1/2[x2,x3] = w/2;
  x3 - x2 = w - 2side_bearing;

  y2 = y3;

  x4 = 1/2[x1,x2];
  x5 = 1/2[x1,x3];

  y4 = y5 = 1/6h;

  y2 - y4 = x4 - x2;

  y1 = 1/3[y2,y4];

  x6 = x0;
  y6 = 0;
  penpos1(1/2rule_thickness, 0);
  penpos6(3/2rule_thickness, 0);

  pickup pencircle scaled rule_thickness;

  fill z0{dir (270-20)} .. z2 .. z4 .. {dir (90-20)}(z1 + 1/2rule_thickness*left)
    -- (z1 + 1/2rule_thickness*right){dir (270+20)} .. z5 .. z3 .. {dir (90+20)}z0 -- cycle;

  fill stroke z1e -- z6e;

  labels (0,1,2,3,4,5,6);
endchar;

beginsymbol(11u#, 1/2[x_height#,asc_height#], 0)
  "club suit";

  radius := 5/11(w - 4side_bearing);

  x0 = w/2;
  y0 = h - 2.5radius;

  x1 = w - x3 = 3/5x0;
  y1 = y3 = y0;
  x2 = x4 = x0;
  y2 = h - radius;
  y4 = 0;

  penpos0(2/3rule_thickness,  0);
  penpos1(2/3rule_thickness, 90);
  penpos2(2/3rule_thickness,  0);
  penpos3(2/3rule_thickness, 90);
  penpos4(3/2rule_thickness,  0);

  fill circle(z1, radius);
  fill circle(z2, radius);
  fill circle(z3, radius);

  fill stroke z2e -- z0e{down} .. z4e;
  fill stroke z1e -- z3e;

  labels (0,1,2,3,4);
endchar;

beginsymbol(5/4order_width# + 2side_bearing#, asc_height#, 0);
  "forall";

  lft x0 = side_bearing;
  rt x1  = w - side_bearing;
  x2     = w/2;

  top y0 = top y1 = h;
  bot y2 = 0;

  z4 = whatever [z0,z2];
  z5 = whatever [z1,z2];

  y4 = y5 = x_height;

  draw_arrow_cut(0,2,1);

  draw_line_scaled(4,5)(8/9);
endchar;

for negated = 0, 1:
  beginsymbol(order_width# + 2side_bearing#,
              if negated = 0: asc_height# else: asc_height# + 2/3equal_spread# fi,
              if negated = 0: 0 else: 2/3equal_spread# fi);
    "exists";

    pickup rule_pen;

    lft x0 = lft x2 = side_bearing;
    rt x1  = rt x3  = w - side_bearing;

    top y0 = top y1 = asc_height;
    bot y2 = bot y3 = 0;

    z4 = 1/8[1/2[z0,z2], 1/2[z1,z3]];draw_line(0,1);
    draw_line(3,2);
    z1a = z1l;
    z3a = z3l;
    
    draw_line(1a,3a);

    z5 = 1/2[z1,z3];
    draw_line(4,5);

    if negated = 1:
      draw_stroke_through(6,7)(1/2[1/2[z0,z2], 1/2[z1,z3]], h + d - stroke_through_thickness)
    fi;
  endchar;
endfor;

beginsymbol(3/2order_width# + 2side_bearing#, vcentre(med_op_size#)); "nabla";
  pickup pencircle scaled 2/3rule_thickness;

  y0l = y1r = h;
  y2l = -d;

  x0l = side_bearing;
  x1r = w - side_bearing;
  x2l = w/2;

  penpos0(4/3rule_thickness/abs(sind(angle(z2l-z0l))),0);
  penpos2(4/3rule_thickness/abs(sind(angle(z0l-z2l)-angle(z1r-z2l))),angle(z1r-z2l));

  penstroke z0e -- z2e;

  z0'r = z0r; 
  penpos0'(2/3rule_thickness,90);
  penpos1(2/3rule_thickness/sind(angle(z1r-z2l)),angle(z1r-z2l));

  penstroke z0'e -- z1e;

  z1'r = z1;
  z2'r = z2r;
  penpos1'(2/3rule_thickness/abs(sind(angle(z1r-z2r))),0);
  penpos2'(2/3rule_thickness/abs(sind(angle(z1r-z2r))),0);

  penstroke z1'e .. z2'e;
  penlabels(0,0',1,2);
endchar;

beginsymbol(2order_width# + 2side_bearing#, x_height#, 0); "infinity";
  pickup rule_pen;

  lft x0 = side_bearing;
  rt  x1 = w - side_bearing;

  top y2 = top y4 = h;
  bot y3 = bot y5 = d + rule_thickness;

  y0 = y1 = 1/2[y2,y3];

  x2 = x3 = 1/5[x0,x1];
  x4 = x5 = 4/5[x0,x1];

  penpos0 (rule_thickness, 180);
  penpos1 (rule_thickness, 180);
  penpos2 (3/2rule_thickness * cosd 30, 75);
  penpos5 (3/2rule_thickness * cosd 30, 75);
  penpos6 (3/2rule_thickness, 45);
  penpos7 (3/2rule_thickness, 45);
  penpos8 (3/2rule_thickness, 45);
  penpos9 (6/5rule_thickness, 135);
  penpos10(6/6rule_thickness, 135);

  z6 = 1/2[z0,z1];

  z7  = point 1/3 of (z2{right} .. {dir -45}z6);
  z8  = point 2/3 of (z6{dir -45} .. {right}z5);
  z9  = point 7/12 of (z0{up} .. {right}z2);
  z10 = point 5/12 of (z5{right} .. {up}z1);


  penpos4(rule_thickness,-90);
  z11=z6;
  penpos11(rule_thickness, -45);
  penpos3(rule_thickness,-90);

  fill stroke z0e{up} .. {dir 45}z9e .. z2e{right} .. z7e
  .. {dir -45}z6e .. z8e .. {right}z5e .. {dir 45}z10e .. {up}z1e{dir 90}
  .. z4e{dir 180} .. {dir 225}z11e{dir 225} .. {dir 180}z3e{dir 180}
  .. {dir 90}z0e;

  penlabels(0,1,2,3,4,5,6,7,8,9,10,11);
endchar;

beginsymbol(1/2order_width# + 2side_bearing#,
            asc_height# + 2/3rule_thickness#,
            2/3rule_thickness#);
  "small integral";

  pair centre;
  centre := (w/2, (h - d)/2);

  draw_integral([0])(1/4, centre);
endchar;

beginsymbol(order_width#, asc_height#, 0)
  "flat";

  x0 = x1 = x4 = side_bearing + rule_thickness;
  y0 = 0; y1 = h;
  x3 = w - side_bearing;

  y3 = 0.45[y0,y1];

  y4 = 4/5x_height;

  penpos0(rule_thickness/cosd(10), 10);
  penpos1(rule_thickness/cosd(10), 10);
  penpos3(rule_thickness, 0);

  fill stroke z0e -- z1e;

  pickup pencircle scaled rule_thickness;

  z0a = z0r - .5rule_thickness*dir -50;
  penpos0a(rule_thickness/cosd(10),-50);
  penpos4(rule_thickness,140);

  penstroke z0a.e{dir 40} .. {up}z3e .. {dir 230}z4e;

  penlabels (0,0a,1,3,4);
  endchar;

beginsymbol(order_width#, asc_height#, 0)
  "natural";

  x0 = x1 = w - x2 = w - x3 = side_bearing + 1/2rule_thickness;
  x4 = x5 = w - x6 = w - x7 = side_bearing;

  y1 = y3 = h;
  y7 = x_height;
  y6l = 0;
  y0 = y2  = -h/3;

  z6 = z4 + whatever * dir 15;
  z5 = z7 + whatever * dir 15;

  z8 = whatever[z0,z1] = whatever[z4,z6];
  z9 = whatever[z2,z3] = whatever[z5,z7];

  x10 = x0l;
  x11 = x0l;
  x12 = x2r;
  x13 = x2r;

  z10 = whatever[z4,z6];
  z11 = whatever[z5,z7];
  z12 = whatever[z4,z6];
  z13 = whatever[z5,z7];

  penpos0(rule_thickness/cosd(10), 10);
  penpos1(rule_thickness/cosd(10), 10);
  penpos2(rule_thickness/cosd(10), 10);
  penpos3(rule_thickness/cosd(10), 10);
  penpos4(5/4rule_thickness/cosd(angle(z7-z5)), 90);
  penpos5(5/4rule_thickness/cosd(angle(z7-z5)), 90);
  penpos6(5/4rule_thickness/cosd(angle(z7-z5)), 90);
  penpos7(5/4rule_thickness/cosd(angle(z7-z5)), 90);
  penpos8 (rule_thickness/cosd(10), 10);
  penpos9 (rule_thickness/cosd(10), 10);
  penpos10(5/4rule_thickness/cosd(angle(z7-z5)), 90);
  penpos11(5/4rule_thickness/cosd(angle(z7-z5)), 90);
  penpos12(5/4rule_thickness/cosd(angle(z7-z5)), 90);
  penpos13(5/4rule_thickness/cosd(angle(z7-z5)), 90);

  fill stroke z1e -- z8e;
  fill stroke z9e -- z2e;
  fill stroke z10e -- z12e;
  fill stroke z11e -- z13e;

  penlabels (0,1,2,3,4,5,6,7,8,9,10,11,12,13);
  endchar;

beginsymbol(order_width#, asc_height#, 0)
  "sharp";

  x0 = x1 = w - x2 = w - x3 = side_bearing + rule_thickness;

  x4 = x5 = w - x6 = w - x7 = side_bearing;

  y3 = h;
  y7 = x_height;
  y6l = 0;
  y0  = -h/3;

  z2 = z0 + whatever * dir 20;
  z1 = z3 + whatever * dir 20;
  z6 = z4 + whatever * dir 15;
  z5 = z7 + whatever * dir 15;

  penpos0(rule_thickness/cosd(10), 10);
  penpos1(rule_thickness/cosd(10), 10);
  penpos2(rule_thickness/cosd(10), 10);
  penpos3(rule_thickness/cosd(10), 10);
  penpos4(5/4rule_thickness/cosd(angle(z7-z5)), 90);
  penpos5(5/4rule_thickness/cosd(angle(z7-z5)), 90);
  penpos6(5/4rule_thickness/cosd(angle(z7-z5)), 90);
  penpos7(5/4rule_thickness/cosd(angle(z7-z5)), 90);

  fill stroke z0e -- z1e;
  fill stroke z2e -- z3e;
  fill stroke z4e -- z6e;
  fill stroke z5e -- z7e;

  penlabels (0,1,2,3,4,5,6,7);
endchar;

beginsymbol(11u#, 0.85asc_height#, 0); "aleph";

  penpos 2(1.3rule_thickness, 0);
  penpos 3(1.3rule_thickness, 0);

  penpos 9(rule_thickness, 90);

  x8l = x7l;
  y8l = y9r;

  x8r = x7r;
  y8r = y9r;

  x2l = side_bearing;
  x3r = w - side_bearing;
  y2r = h;
  y3l = 0;

  penstroke z2e .. z3e;

  z5 = 0.35[z2,z3];
  z6 = whatever[z2,z3];

  x7 = x2;
  x9 = 1/2(x5+x8r);
  y7 = y5 - 9/2rule_thickness;
  bot y9l = 0;
  z8'r = z8r;
  z8'r - z8'l = rule_thickness*dir(45);

  alpha := angle (z5 - z7);
  penpos5(rule_thickness, alpha - 90);
  penpos6(rule_thickness, alpha - 90);
  penpos7(rule_thickness,  0);

  penstroke z5e{-dir alpha} .. {down}z7e -- z8e .. z8'e .. {right}z9e;

  z5-z7 = z10-z6;
  z11-z10 = z7l-z8l;
  z11l - z12l = z9r - z8r;
  y12r = h;
  z11'l = z11l;
  z11'r - z11'l = rule_thickness*dir(45);
  penpos10(rule_thickness, 0);
  penpos11(rule_thickness, 0);
  penpos12(rule_thickness, 90);
  penstroke z6e{-dir (alpha+180)} .. {up}z10e -- z11e .. z11'e .. {left}z12e;

  penlabels(2,3,5,6,7,8,9,10,11,12,);
endchar;

beginsymbol(11u#, 0.85asc_height#, 0); "beth";
  penpos2(rule_thickness, 90);
  penpos3(rule_thickness, 90);
  penpos4(rule_thickness, 0);
  penpos5(rule_thickness, 0);
  penpos6(rule_thickness, 90);
  penpos7(rule_thickness, 90);

  x2 = side_bearing + 3*rule_thickness;
  y3r = y2r=h;

  x3 = w - x2;
  y5 = 0;

  x4r = w - side_bearing-rule_thickness;
  y3l - y4 = 2*rule_thickness;

  x5 = x4;

  x6 = w - x7l = side_bearing;
  y6l = y7l = y5;

  penstroke z2e -- z3e{right} .. {down}z4e .. z5e;
  penstroke z6e -- z7e;

  penlabels(1,2,3,4,5,6,7);
endchar;

beginsymbol(7u#, 0.85asc_height#, 0); "gimel";

  penpos1(rule_thickness, 90);
  penpos4(rule_thickness, 0);
  penpos5(rule_thickness, 0);
  penpos7(rule_thickness/sind(70), 0);
  penpos8(rule_thickness, -90);

  x1 = w/2.5;
  y1r = h;
  x4r = w - side_bearing;
  y4 = y1 - 2rule_thickness;

  x5 = x4;
  y5 = 0;

  x7 = side_bearing;
  y7 = 0;
 
  y8 = (w+d)*1/1.618;
  x8 = x5;

  penstroke z1e{right} .. {down}z4e -- z5e;
  penstroke z7e{dir 80} .. {right}z8e;
 % penstroke z7e -- z8e;

  penlabels(1,2,3,4,5,6,7,8);
endchar;

beginsymbol(11u#, 0.85asc_height#, 0); "daleth";

  x2 = side_bearing;
  y2 = h - 1/2rule_thickness;
  y2 = y3 = y4;

  x3 = w - side_bearing;
  x4 = x3 - 9/4rule_thickness;
  y5 = 0;
  x5 = x4;

  draw_line(2,3);
  draw_line(4,5);

  penlabels(2,3,4,5);
endchar;


begingroup;

save slant;
save currenttransform;

slant := 0.212557;

transform currenttransform;

currenttransform := identity slanted slant yscaled aspect_ratio scaled granularity shifted (-u,0);

beginsymbol(11u#, x_height#, 8/25asc_height#);
  "Weierstrass p";

  numeric theta;
  theta = 90-angle(8u,h);
  slope := -h/8u;  % angle at middle
  superness := 1/sqrt 2;
  superpull := 1/6;

  penpos2(rule_thickness, -90);
  penpos1(rule_thickness,theta);
  penpos7(rule_thickness, -90);

  x2 + .5u = x1 = x7 - .5u = 3u;
  top y2l = h;
  bot y7r = -d;
  y1 = .4[-d, h];

  lft x3l = hround .5u;
  rt  x6r = hround max(rt x7 + .5, .5w - .25u);

  x3r - x3l = x6r - x6l = rule_thickness;

  ellipse_set(2l,3l,4l,1l);
  ellipse_set(2r,3r,4r,1r);
  ellipse_set(7l,6l,5l,1l);
  ellipse_set(7r,6r,5r,1r);

  y3 = y3r;
  y6 = y6r;

  fill stroke super_arc.e(2,3) & z3e{down} .. z4e --- z5e .. z6e{down} & super_arc.e(6,7);  % flourish

  penpos8(rule_thickness, 180);
  penpos9(rule_thickness, 90);
  penpos10(rule_thickness, 0);
  penpos11(rule_thickness, -90);
  penpos12(rule_thickness, -180);
  penpos13(rule_thickness, -180);

  rt  x10r = hround(w - 1.5u + 1/2rule_thickness);
  lft x12r = hround(.5w - .5u);
  rt  x8l  = hround 2.25u;
  x9 = x11 = max(x12l + eps, .5w + 1.5u);
  y8 = 0;
  top y9r = vround .95h;
  y10 = .5[y9,y11];
  bot y11r = y8;

  y13 - 5/7rule_thickness = .15h;
  z13r = z12r;  
  
  filldraw stroke z7e{left} ... z8e{up} ... pulled_arc.e(9,10) & pulled_arc.e(10,11) & pulled_arc.e(11,12);  % stem and bowl

%  bulb(11,12,13);  % bulb

  penlabels(1,2,3,4,5,6,7,8,9,10,11,12,13);
endchar;

beginsymbol(11u#, 11/10asc_height#, 1/10asc_height#);
  "powerset";

  numeric theta;
  theta = 90 - angle(12/7*8u, h);
  slope := -h/(12/7*8u);  % angle at middle
  superness := 1/sqrt 2;
  superpull := 1/6;

  penpos2(rule_thickness, -90);
  penpos1(rule_thickness,theta);
  penpos7(rule_thickness, -90);

  x2 + .5u = x1 = x7 - .5u = 3u;
  top y2l = h;
  bot y7r = -d;
  y1 = .4h;

  lft x3l = hround .5u;
  rt  x6r = hround max(rt x7 + .5, .5w - .25u);

  x3r - x3l = x6r - x6l = rule_thickness;

  ellipse_set(2l,3l,4l,1l);
  ellipse_set(2r,3r,4r,1r);
  ellipse_set(7l,6l,5l,1l);
  ellipse_set(7r,6r,5r,1r);

  y3 = y3r;
  y6 = y6r;

  fill stroke super_arc.e(2,3) & z3e{down} .. z4e --- z5e .. z6e{down} & super_arc.e(6,7);  % flourish

  penpos8(rule_thickness, 180);
  penpos9(rule_thickness, 90);
  penpos10(rule_thickness, 0);
  penpos11(rule_thickness, -90);
  penpos12(rule_thickness, -180);
  penpos13(5/7rule_thickness, -180);

  rt  x10r = hround(w - 1.5u + 1/2rule_thickness);
  lft x12r = hround(.5w - .5u);
  rt  x8l  = hround 2.25u;
  x9 = x11 = max(x12l + eps, .5w + 1.5u);
  y8 = 10/11*5/12h;
  top y9r = vround .95h;
  y10 = .5[y9,y11];
  bot y11r = y8;

  z13r = z12r;
  y13 - 5/7rule_thickness = y8 + 1/10h;

  fill stroke z7e{left} ... z8e{up} ... pulled_arc.e(9,10) & pulled_arc.e(10,11) & pulled_arc.e(11,12);  % stem and bowl

%  y13 - 5/7rule_thickness = y8 + 1/10h;
%  bulb(11,12,13);  % bulb

  penlabels(1,2,3,4,5,6,7,8,9,10,11,12,13);
endchar;

endgroup;

% Warning: The other two orientations are above.
% They should stay consistent.

beginoperator(plus_size#, 1); "upside down logical not";

  r := plus_size/2; % - 11/10rule_thickness;

  z1 = centre + r * dir 180; z2 = centre + r * dir 0;
  z3 = centre + r * dir 0 + equal_spread * dir 90;
  z2a = z2r;
  
  draw_line(1,2);
  draw_line(2a,3);
endchar;

beginoperator(plus_size#, 1); "upside down reversed logical not";

  r := plus_size/2; % - 11/10rule_thickness;

  z1 = centre + r * dir 180 + equal_spread * dir 90;
  z2 = centre + r * dir 180; z3 = centre + r * dir 0;
  z2a = z2r;
  
  draw_line(1,2); draw_line(2a,3);
endchar;

for sign = 1, -1:
  beginoperator(plus_size#, 1); "half square union";

    z3 - z0 = z2 - z1 = (plus_size-rule_thickness) * dir 0;
    z0 - z1 = sign * plus_size * dir 90;

    1/2[1/2[z0,z1], 1/2[z2,z3]] = centre;

    z1a = z1 + 1/2*rule_thickness*(sign*up+left);
    z2a = z2 + 1/2*rule_thickness*(sign*up+right);
    
    draw_line(0,1); draw_line(1a,2a);
    penlabels(3);
  endchar;

  beginoperator(plus_size#, 1); "half square union";
    pickup rule_pen;

    z3 - z0 = z2 - z1 = (plus_size-rule_thickness) * dir 0;
    z0 - z1 = sign * plus_size * dir 90;

    1/2[1/2[z0,z1], 1/2[z2,z3]] = centre;

    z1a = z1 + 1/2*rule_thickness*(sign*up+left);
    z2a = z2 + 1/2*rule_thickness*(sign*up+right);

    draw_line(2,3); draw_line(1a,2a);
    penlabels(3);
  endchar;
endfor;

for alpha = 0, 90, 180, 270:
  beginoperator(plus_size#, 1); "closed curly wedge";
    pickup rule_pen;

    z0 = centre + 1/2plus_size * dir alpha;
    z1 = centre - 1/2plus_size * dir alpha;
    z2 = z1 + 1/2plus_size * dir (alpha + 90);
    z3 = z1 - 1/2plus_size * dir (alpha + 90);

    z3a = z3;
    
    penpos0(rule_thickness,-90+alpha);
    penpos2(rule_thickness,120+90+alpha);
    penpos3(rule_thickness,240+90+alpha);
    penpos3a(rule_thickness,240+90+180+alpha);
      
    penstroke z0e{dir (alpha + 180)} .. {dir (alpha - 140)}z3e;
    penstroke z2e{dir (alpha - 40)} .. {dir alpha}z0e;
    penstroke z3a.e{dir (alpha + 40)}  .. {dir (alpha + 140)}z2e;
%    draw z2{dir (alpha - 40)} .. {dir alpha}z0{dir (alpha + 180)}
%      .. {dir (alpha - 140)}z3{dir (alpha + 40)}
%      .. {dir (alpha + 140)}z2 .. cycle;
    penlabels(0,1,2,3,3a);
    
  endchar;
endfor;

for alpha = 0, 90, 180, 270:
  beginoperator(6/5plus_size#, 1); "slice";

    z1 - 1/2[z0,z2] = plus_size * dir alpha;

    z2 - z0 = plus_size * dir (alpha + 90);

    7/12[z1,1/2[z0,z2]] = centre;

    z0a = z0r;
    z2a = z2l;

    penpos0a(rule_thickness,angle(z1-z0));
    penpos2a(rule_thickness,angle(z1-z2));

    if known ps_output:
      arrow_path(2,1,0)(P);
      a:= reverse stroke z0a.e{dir (alpha + 120)} .. {dir (alpha + 60)}z2a.e;
      find_outlines(a,P1)(Q);
      fill Q[2];
      unfill Q[1];
    else:
      draw_arrow(2,1,0);
      penstroke z0a.e{dir (alpha + 120)} .. {dir (alpha + 60)}z2a.e;
    fi
      
    penlabels(0,0a,1,2,2a);
  endchar;
endfor;

beginoperator(5/6small_op_size#, 8/5); "small lozenge";
  lft x0 = w - rt x2 = side_bearing;
  y0 = y2 = ypart centre;

  x1 = x3 = xpart centre;
  y1 = h;
  y3 = -d;

  penpos0(rule_thickness/abs(sind(angle(z1-z0))),0);
  penpos1(rule_thickness/abs(cosd(angle(z2-z1))),-90);
  penpos2(rule_thickness/abs(sind(angle(z1-z0))),-180);
  penpos3(rule_thickness/abs(cosd(angle(z2-z1))),90);
  
  penstroke z0e -- z1e -- z2e -- z3e -- cycle;

  penlabels(0,1,2,3);
endchar;

beginoperator(5/6small_op_size#, 8/5); "small filled lozenge";
  lft x0 = w - rt x2 = side_bearing;
  y0 = y2 = ypart centre;

  x1 = x3 = xpart centre;
  y1 = h;
  y3 = -d;

  penpos0(rule_thickness/abs(sind(angle(z1-z0))),0);
  penpos1(rule_thickness/abs(cosd(angle(z2-z1))),-90);
  penpos2(rule_thickness/abs(sind(angle(z1-z0))),-180);
  penpos3(rule_thickness/abs(cosd(angle(z2-z1))),90);
  
  fill z0l -- z1l -- z2l -- z3l -- cycle;
endchar;

beginoperator(1/sqrt(2)*med_op_size#, 8/5); "medium lozenge";
  pickup rule_pen;

  lft x0 = w - rt x2 = side_bearing;
  y0 = y2 = ypart centre;

  x1 = x3 = xpart centre;
  top y1 = h;
  bot y3 = -d;

  penpos0(rule_thickness/abs(sind(angle(z1-z0))),0);
  penpos1(rule_thickness/abs(cosd(angle(z2-z1))),-90);
  penpos2(rule_thickness/abs(sind(angle(z1-z0))),-180);
  penpos3(rule_thickness/abs(cosd(angle(z2-z1))),90);
  
  penstroke z0e -- z1e -- z2e -- z3e -- cycle;
endchar;

beginoperator(1/sqrt(2)*med_op_size#, 8/5); "medium filled lozenge";
  pickup rule_pen;

  lft x0 = w - rt x2 = side_bearing;
  y0 = y2 = ypart centre;

  x1 = x3 = xpart centre;
  top y1 = h;
  bot y3 = -d;

  penpos0(rule_thickness/abs(sind(angle(z1-z0))),0);
  penpos1(rule_thickness/abs(cosd(angle(z2-z1))),-90);
  penpos2(rule_thickness/abs(sind(angle(z1-z0))),-180);
  penpos3(rule_thickness/abs(cosd(angle(z2-z1))),90);
  
  fill z0l -- z1l -- z2l -- z3l -- cycle;
endchar;

beginoperator(1/sqrt(2)*large_op_size#, 8/5); "large lozenge";
  pickup rule_pen;

  lft x0 = w - rt x2 = side_bearing;
  y0 = y2 = ypart centre;

  x1 = x3 = xpart centre;
  top y1 = h;
  bot y3 = -d;

  penpos0(rule_thickness/abs(sind(angle(z1-z0))),0);
  penpos1(rule_thickness/abs(cosd(angle(z2-z1))),-90);
  penpos2(rule_thickness/abs(sind(angle(z1-z0))),-180);
  penpos3(rule_thickness/abs(cosd(angle(z2-z1))),90);
  
  penstroke z0e -- z1e -- z2e -- z3e -- cycle;
endchar;

for alpha = 0, 90, 180, 270:
  beginoperator(med_op_size#, 1); "medium filled triangle (" & decimal alpha & ")";
%    draw triangle(centre, w/2-side_bearing, alpha);
    fill_triangle(1)(centre, w/2-side_bearing, alpha);
  endchar;
endfor;

beginoperator(med_op_size#/sqrt(2), 1); "medium filled square";
%  draw_square(1,2,3,4)(centre, w/2 - side_bearing, 0);
  fill square(centre, w/2 - side_bearing, 0);
endchar;


beginoperator(large_op_size#, 1); "large filled star";
  r := w/2 - side_bearing;
  reg_poly_points(a)(5, centre, r, 90);
  reg_poly_points(b)(5, centre, .4r, 126);
%  draw z.a0 -- z.b0 -- z.a1 -- z.b1 -- z.a2 -- z.b2 -- z.a3 -- z.b3 -- z.a4 -- z.b4 -- cycle;
  fill z.a0 -- z.b0 -- z.a1 -- z.b1 -- z.a2 -- z.b2 -- z.a3 -- z.b3 -- z.a4 -- z.b4 -- cycle;
endchar;

beginoperator(med_op_size#, 1); "medium star of david";
  pickup pencircle scaled 4/5rule_thickness;
  r := w/2 - side_bearing;
  reg_poly_points_p(a)(6, centre, r, 90, 1/sind(30));
  penstroke z.a0e -- z.a2e -- z.a4e -- cycle;
  penstroke z.a1e -- z.a3e -- z.a5e -- cycle;
endchar;

beginoperator(large_op_size#, 1); "large star of david";
  r := w/2 - side_bearing;
  reg_poly_points_p(a)(6, centre, r, 90, 1/sind(30));
  penstroke z.a0e -- z.a2e -- z.a4e -- cycle;
  penstroke z.a1e -- z.a3e -- z.a5e -- cycle;
endchar;

beginoperator(med_op_size#, 1); "maltese";
  pickup rule_pen;

  1/2[z0,z1] = centre + 1/2med_op_size * dir 180;
  1/2[z2,z3] = centre + 1/2med_op_size * dir 270;
  1/2[z4,z5] = centre + 1/2med_op_size * dir 0;
  1/2[z6,z7] = centre + 1/2med_op_size * dir 90;

  z0 - z1 = z5 - z4 = 1/2med_op_size * up;
  z3 - z2 = z6 - z7 = 1/2med_op_size * right;

  fill z1{dir 45}
    .. {right}(centre + 1/2*rule_thickness*(down+left)){down}
    .. {dir 225}z2 -- z3{dir 135}
    .. {up}(centre + 1/2rule_thickness*(right+down)){right}
    .. {dir -45}z4 -- z5{dir 225}
    .. {left}(centre + 1/2rule_thickness*(up+right)){up}
    .. {dir 45}z6 -- z7{dir -45}
    .. {down}(centre + 1/2rule_thickness*(left+up)){left}
    .. z0{dir 135} -- cycle;

  penlabels(0,1,2,3,4,5,6,7)
endchar;


current_char := 219;

% Keep these consistent with the glyphs in MySym-Order.mf!

for negated = 0, 1:

  vardef ifneg(text values) =
    select(negated)(values)
  enddef;

  beginorder(1, order_width# + rule_thickness#, ifneg(2,4) * equal_spread# + rule_thickness#);
    "closedequal";

    z2 - z1 = z1 - z0 = equal_spread * dir 90;
    z5 - z4 = z4 - z3 = equal_spread * dir 90;

    1/2[z0, z2] = left_point;
    1/2[z3, z5] = right_point;

    draw_line(0,3);
    draw_line(1,4);
    draw_line(2,5);
    z4a = z4r+1/2rule_thickness*left; z5a = z5r+1/2rule_thickness*left; draw_line(4a,5a);
    z2a = z2r-1/2rule_thickness*left; z1a = z1r-1/2rule_thickness*left; draw_line(2a,1a);

    if negated = 1:
      draw_stroke_through(6,7)(centre, 4equal_spread);
    fi;
  endchar;

  beginorder(1, order_width# + rule_thickness#, ifneg(2,4) * equal_spread# + rule_thickness#);
    "equalclosed";

    z2 - z1 = z1 - z0 = equal_spread * dir 90;
    z5 - z4 = z4 - z3 = equal_spread * dir 90;

    1/2[z0, z2] = left_point;
    1/2[z3, z5] = right_point;

    draw_line(0,3); 
    draw_line(1,4);
    draw_line(2,5);

    z4a = z4r+1/2rule_thickness*left; z3a = z3r+1/2rule_thickness*left; draw_line(4a,3a);
    z0a = z0r-1/2rule_thickness*left; z1a = z1r-1/2rule_thickness*left; draw_line(0a,1a);
  
    if negated = 1:
      stroke_through(centre, 4equal_spread);
    fi;
  endchar;

  beginorder(1, order_width# + rule_thickness#, ifneg(2,4) * equal_spread# + rule_thickness#);
    "equivclosed";
    pickup rule_pen;

    z2 - z1 = z1 - z0 = equal_spread * dir 90;
    z5 - z4 = z4 - z3 = equal_spread * dir 90;

    1/2[z0, z2] = left_point;
    1/2[z3, z5] = right_point;

    draw_line(0,3); 
    draw_line(1,4);
    draw_line(2,5);

    z5a = z5r+1/2rule_thickness*left; z3a = z3r+1/2rule_thickness*left; draw_line(5a,3a);
    z0a = z0r-1/2rule_thickness*left; z2a = z2r-1/2rule_thickness*left; draw_line(0a,2a);
    
    if negated = 1:
      stroke_through(centre, 4equal_spread);
    fi;
  endchar;

  for sign = 1, -1:
    beginorder(sign, order_width# + rule_thickness#,
                     greater_spread# + ifneg(4/3, 8/3) * equal_spread# + rule_thickness#);
      "less sim";

      z1 - z0 = greater_spread * dir 90;
      y2 = 1/2[y0, y1];
      x0 = xpart right_point;
      x2 = xpart left_point;
      y3 = y4 = y0 - equal_spread;
      x4 - x3 = sign * (x0 - x2) - rule_thickness;
      1/2[x3,x4] = xpart centre;

      1/2[y1, y4 - 1/3equal_spread] = ypart centre;

    if sign=1:
      draw_arrow_cut(1,2,0);
    else:
      draw_arrow_cut(0,2,1);
    fi

    draw_sim(5)(z3, z4);

      if negated = 1:
        draw_stroke_through(6,7)(centre, 8/3equal_spread + greater_spread);
      fi;
    endchar;
  endfor;

  for sign = 1, -1:
    beginorder(sign, order_width# + rule_thickness#,
                     greater_spread# + ifneg(7/3, 9/3) * equal_spread# + rule_thickness#);
      "less approx";

      z1 - z0 = greater_spread * dir 90;
      y2 = 1/2[y0, y1];
      x0 = xpart right_point;
      x2 = xpart left_point;
      y3 = y4 = y0 - equal_spread;
      y5 = y6 = y4 - equal_spread;
      x4 - x3 = sign * (x0 - x2)-rule_thickness;
      1/2[x3,x4] = xpart centre;
      x6 = x4;
      x5 = x3;

      1/2[y1, y6 - 1/3equal_spread] = ypart centre;

      if sign=1:
        draw_arrow_cut(1,2,0);
      else:
        draw_arrow_cut(0,2,1);
      fi
      draw_sim(7)(z3, z4);
      draw_sim(14)(z5, z6);

      if negated = 1:
        draw_stroke_through(21,22)(centre, 9/3equal_spread + greater_spread);
      fi;
    endchar;
  endfor;

  for sign = 1, -1:
    beginorder(sign, order_width# + rule_thickness#,
      greater_spread# + ifneg(1,3) * equal_spread# + rule_thickness#);
      "slanted equal or less than";

      z0 - z1 = greater_spread * dir 90;
      z3 - z2 = equal_spread * dir 90;
      z4 - z0 = equal_spread * dir 90;

      1/2[z2, z3] = left_point;
      1/2[z1, z4] = right_point;

    if sign=1:
      draw_arrow_cut(1,2,0);
    else:
      draw_arrow_cut(0,2,1);
    fi
      draw_line_cut(3,4);

      if negated = 1:
        draw_stroke_through(5,6)(centre, 3equal_spread + greater_spread);
      fi;
    endchar;
  endfor;

  for sign = 1, -1:
    beginorder(sign, order_width# + rule_thickness#,
               ifneg(1,3) * equal_spread# + 2/3[equal_spread#, greater_spread#] + rule_thickness#);
      "curly equal or curly less than";

      t := 2/3[equal_spread, greater_spread];

      z0 - z1 = equal_spread * dir 90;
      z2 - z4 = 7/5equal_spread * dir 90;
      z4 - z3 = t/2 * dir 90;
      y1 = y3;
      y4 = ypart centre + 1/2(t - equal_spread);
      x0 = xpart left_point;
      x2 = xpart right_point;

      path p,q,o;

      p = z0{z3 - z1} .. z2;

      v := xpart (p intersectiontimes (z4 -- (z4 + h * dir (90 + sign * 10))));

      draw_prec(5,6,7)(z1, z3, t);
      penpos2(rule_thickness,90+sign*40);
      penpos0(rule_thickness,90);

    % we want only a part of the path from z2 to z0 but with the same
    % angle at the end
      o = subpath (1-v,1) of (z2l{dir (-1*(90+sign*40))} .. {dir ((1+sign)*90)}z0l);
      z8l = point 0 of o;
      penpos8(rule_thickness,90+sign*40);

      q := z2r{dir (-1*(90+sign*40))} .. {dir ((1+sign)*90)}z0r;
      v := xpart (q intersectiontimes (z8l -- 1.2[z8l,z8r]));
      q := subpath (v,1) of q;
    
    
      fill o -- (reverse q) -- cycle;
    
      if negated = 1:
        draw_stroke_through(10,11)(centre, 3equal_spread + 2/3[equal_spread, greater_spread]);
      fi;

      labels(0,1,2,3,4);
    endchar;
  endfor;

  for alpha = 0, 180:
    beginarrow(alpha, 6/5, ifneg(14/10, 21/10) * arrow_spread#); "triple arrow (" & decimal alpha & ")";

      z1 - z0 = z2 - z1 = z4 - z3 = z5 - z4 = 2/3equal_spread * dir (arrow_dir + 90);

      z1 = foot;
      z4 = head;

      z6 = arrowhead_intersection(head, arrow_dir, 14/10arrow_spread, z0 -- z3);
      draw_line_scaled(0,6)(4/5);
      %z7 = arrowhead_intersection(head, arrow_dir, 14/10arrow_spread, z1 -- z4);
      draw_line_scaled(1,4)(4/5);
      z8 =  arrowhead_intersection(head, arrow_dir, 14/10arrow_spread, z2 -- z5);
      draw_line_scaled(2,8)(4/5);

      draw_arrowhead(9,10)(head, arrow_dir, 14/10arrow_spread);

    
      if negated = 1:
        draw_stroke_through_arrow(11,12)(1/2[foot, head - arrow_spread * dir arrow_dir], alpha, 21/10arrow_spread)
                            (70, 70, 110, 110, 70, 70, 110, 110);
      fi
    endchar;
  endfor;

endfor;

for sign = -1, 1:
  beginsymbol(4/3arrow_spread# + 2side_bearing#, vcentre(2arrow_spread# + rule_thickness#));
    "left shift";

    top y0 = top y1 = h - 1/2arrow_spread;
    bot y2 = -d;

    1/2[x0,x1] = w/2;
    x1 - x0 = sign * 4/3arrow_spread;

    x2 = x1;
    z1a = z1+1/2rule_thickness*up;
    draw_line(0,1); draw_line(1a,2);

    draw_arrowhead(3,4)(z0, 90 + sign * 90, arrow_spread);
  endchar;
endfor;

for sign = -1, 1:
  beginoperator(arrow_len#, 1);
    "loop arrow";

    pickup rule_pen;

    z0 = centre + sign * arrow_len/2 * left;
    z1 = centre + arrow_len/2 * down;
    z2 = centre + (arrow_len-rule_thickness)/4 * up;
    z3 = centre + sign * (arrow_len-rule_thickness)/4 * right;
    z4 = centre + (arrow_len-rule_thickness) * (1/4sign, 1/2);
    z5 = centre + (arrow_len-rule_thickness) * (1/2sign, 1/4);

    penpos1(rule_thickness,90*(1-sign));
    penpos2(rule_thickness,90*(1-sign));
    penpos3(rule_thickness,90);
    penpos4(rule_thickness,-90);
    penpos5(rule_thickness,90*(1+sign));
    penpos0(rule_thickness,90);
    
    penstroke z0e -- z3e{sign * right} .. {up}z5e .. {sign * left}z4e .. {down}z2e -- z1e;

    draw_arrowhead(c,d)(z0, 90 + sign * 90, arrow_spread);
    penlabels(0,1,2,3,4,5);
  endchar;
endfor;

for sign = -1, 1:
  beginoperator(plus_size#, 1); "three times";

    r := plus_size/2;
    r := r * 1/3[1, sqrt 2];

    z0 = centre + r * dir (sign * 45);
    z1 = centre + r * dir (sign * 225);
    z2 = centre + r * dir (270 + sign * 45);
    z3 = centre + 1/4rule_thickness * dir (270 + sign * 45);

    draw_line(0,1);
    draw_line(3,2);
  endchar;
endfor;

beginarrow(0, 5/6, 7/4arrow_spread#);
  "Vvdash";

  z0 = foot + 4/5equal_spread * dir arrow_dir;
  z1 = foot + 8/5equal_spread * dir arrow_dir;

  z2 = z1 + 1/4rule_thickness * dir arrow_dir;
  z3 = head;
  draw_line(2,3);
z4 = foot - 7/8arrow_spread * dir (arrow_dir + 90);
z5 = foot + 7/8arrow_spread * dir (arrow_dir + 90);
draw_line(4,5);
z6 = z0   - 7/8arrow_spread * dir (arrow_dir + 90);
z7 = z0   + 7/8arrow_spread * dir (arrow_dir + 90);
draw_line(6,7);
z8 = z1   - 7/8arrow_spread * dir (arrow_dir + 90);
z9 = z1   + 7/8arrow_spread * dir (arrow_dir + 90);
draw_line(8,9);
endchar;

beginoperator(plus_size#, 1); "negated medium bar";
  r := plus_size/2; % - 11/10rule_thickness;

  z1a = centre + r * dir 90; z1b = centre + r * dir 270;
  draw_line(1a,1b);

  draw_stroke_through_arrow(3,4)(centre, 90, 2/3plus_size, 45);
endchar;

beginoperator(plus_size#, 1); "double bar";
  r := plus_size/2; % - 11/10rule_thickness;

  z1 - z0 = equal_spread * right;
  1/2[z0,z1] = centre;

  z0a = z0 + r * up; z0b = z0 + r * down;
  draw_line(0a,0b);
  z1a = z1 + r * up; z1b = z1 + r * down;
  draw_line(1a,1b);
endchar;

beginoperator(plus_size#, 1); "negated double bar";
  pickup rule_pen;

  r := plus_size/2; % - 11/10rule_thickness;

  z1 - z0 = equal_spread * right;
  1/2[z0,z1] = centre;

  z0a = z0 + r * up; z0b = z0 + r * down;
  draw_line(0a,0b);
  z1a = z1 + r * up; z1b = z1 + r * down;
  draw_line(1a,1b);

  draw_stroke_through_arrow(3,4)(centre, 90, plus_size, 40);
endchar;

